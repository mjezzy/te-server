import { getVerifiableCredential } from '@inrupt/solid-client-vc';
import { isRdfjsAccessRequest, isAccessRequest } from '../guard/isAccessRequest.mjs';
import { getSessionFetch } from '../../common/util/getSessionFetch.mjs';
import { normalizeAccessRequest } from '../request/issueAccessRequest.mjs';
import { AccessGrantError } from '../../common/errors/AccessGrantError.mjs';

/**
 * Fetch the Access Request from the given URL.
 *
 * @param url The URL of the Access Request.
 * @param options Optional properties to customise the behaviour:
 * - fetch: an authenticated fetch function. If not provided, the default session
 * from @inrupt/solid-client-authn-browser will be used if available.
 * @returns An Access Request.
 * @since 2.4.0
 * @deprecated Use RDFJS API instead of relying on the JSON structure by setting `returnLegacyJsonld` to false
 */
async function getAccessRequest(url, options = {}) {
    if (options?.returnLegacyJsonld === false) {
        const accessRequest = await getVerifiableCredential(url.toString(), {
            fetch: options.fetch ?? (await getSessionFetch(options)),
            returnLegacyJsonld: false,
        });
        if (!isRdfjsAccessRequest(accessRequest)) {
            throw new AccessGrantError(`${JSON.stringify(accessRequest)} is not an Access Request`);
        }
        return accessRequest;
    }
    const accessRequest = await getVerifiableCredential(url.toString(), {
        fetch: options.fetch ?? (await getSessionFetch(options)),
        normalize: normalizeAccessRequest,
    });
    if (!isAccessRequest(accessRequest)) {
        throw new AccessGrantError(`${JSON.stringify(accessRequest, null, 2)} is not an Access Request`);
    }
    return accessRequest;
}

export { getAccessRequest as default, getAccessRequest };
