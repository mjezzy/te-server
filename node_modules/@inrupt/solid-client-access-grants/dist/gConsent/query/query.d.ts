import type { DatasetWithId } from "@inrupt/solid-client-vc";
/**
 * Supported Access Request statuses
 */
export type AccessRequestStatus = "Pending" | "Denied" | "Granted" | "Canceled" | "Expired";
/**
 * Supported Access Grant statuses
 */
export type AccessGrantStatus = "Expired" | "Active" | "Revoked";
/**
 * Supported Access Credential types
 */
export type CredentialType = "SolidAccessRequest" | "SolidAccessGrant" | "SolidAccessDenial";
/**
 * Supported durations for Access Credential filtering.
 */
export declare const DURATION: {
    readonly ONE_DAY: "P1D";
    readonly ONE_WEEK: "P7D";
    readonly ONE_MONTH: "P1M";
    readonly THREE_MONTHS: "P3M";
};
export type CredentialFilter = {
    /**
     * The Access Credential type (e.g. Access Request, Access Grant...).
     */
    type?: CredentialType;
    /**
     * The Access Credential status (e.g. Active, Revoked...).
     */
    status?: AccessRequestStatus | AccessGrantStatus;
    /**
     * WebID of the Agent who issued the Access Credential.
     */
    fromAgent?: URL;
    /**
     * WebID of the Agent who is the Access Credential recipient.
     */
    toAgent?: URL;
    /**
     * URL of the resource featured in the Access Credential.
     */
    resource?: URL;
    /**
     * URL of the Access Credential purpose.
     */
    purpose?: URL;
    /**
     * Period (expressed using ISO 8601) during which the Credential was issued.
     */
    issuedWithin?: "P1D" | "P7D" | "P1M" | "P3M";
    /**
     * Period (expressed using ISO 8601) during which the Credential was revoked.
     */
    revokedWithin?: "P1D" | "P7D" | "P1M" | "P3M";
    /**
     * Number of items per page.
     */
    pageSize?: number;
    /**
     * Target page (for result pagination).
     */
    page?: string;
};
export type AccessGrantFilter = CredentialFilter & {
    type: "SolidAccessGrant";
    /**
     * The Access Grant status (e.g. Active, Revoked...).
     */
    status?: AccessGrantStatus;
};
export type AccessRequestFilter = CredentialFilter & {
    type: "SolidAccessRequest";
    /**
     * The Access Request status (e.g. Pending, Granted...).
     */
    status?: AccessRequestStatus;
};
export type CredentialResult = {
    /**
     * Page of Access Credentials matching the query.
     */
    items: DatasetWithId[];
    /**
     * First page of query results.
     */
    first?: AccessRequestFilter | AccessGrantFilter;
    /**
     * Previous page of query results.
     */
    prev?: AccessRequestFilter | AccessGrantFilter;
    /**
     * Next page of query results.
     */
    next?: AccessRequestFilter | AccessGrantFilter;
    /**
     * Last page of query results.
     */
    last?: AccessRequestFilter | AccessGrantFilter;
};
/**
 * Query for Access Credential (Access Requests, Access Grants or Access Denials) based on a given filter,
 * and get a page of results.
 *
 * @param filter The query filter
 * @param options Query options
 * @returns a paginated set of Access Credentials matching the given filter
 * @since 3.2.0
 *
 * @example
 * ```
 *  // Get the first results page.
 *  const activeGrantsWithinDay = await query(
 *       {
 *         type: "SolidAccessGrant",
 *         status: "Active",
 *         issuedWithin: DURATION.ONE_DAY,
 *       },
 *       {
 *         fetch: session.fetch,
 *         queryEndpoint: config.queryEndpoint,
 *       },
 *     );
 * // Get the next results page.
 * const activeGrantsWithinDay2 = await query(
 *       activeGrantsWithinDay.next,
 *       {
 *         fetch: session.fetch,
 *         queryEndpoint: config.queryEndpoint,
 *       },
 *     );
 * ```
 */
export declare function query(filter: AccessRequestFilter | AccessGrantFilter, options: {
    fetch: typeof fetch;
    queryEndpoint: URL;
}): Promise<CredentialResult>;
/**
 * Query for Access Credential (Access Requests, Access Grants or Access Denials) based on a given filter,
 * and traverses all of the result pages.
 *
 * @param filter The query filter
 * @param options Query options
 * @returns an async iterator going through the result pages
 * @since 3.2.0
 *
 * @example
 * ```
 *  const pages = paginatedQuery(
 *     {},
 *     {
 *       fetch: session.fetch,
 *       queryEndpoint: new URL("https://vc.example.org/query"),
 *     },
 *   );
 *   for await (const page of pages) {
 *     // do something with the result page.
 *   }
 * ```
 */
export declare function paginatedQuery(filter: AccessRequestFilter | AccessGrantFilter, options: {
    fetch: typeof fetch;
    queryEndpoint: URL;
}): AsyncGenerator<CredentialResult, void, unknown>;
