(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.SolidClient = {}));
})(this, (function (exports) { 'use strict';

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    /**
     * Superclass of all errors thrown by Inrupt's client libraries.
     *
     * @since 0.0.1
     */
    class InruptClientError extends Error {
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    /**
     * The Problem Details MIME type documented in {@link https://www.rfc-editor.org/rfc/rfc9457}.
     *
     * @since 0.0.1
     */
    const PROBLEM_DETAILS_MIME = "application/problem+json";
    /**
     * The default type problem documented in {@link https://www.rfc-editor.org/rfc/rfc9457#name-aboutblank}.
     *
     * @since 0.0.1
     */
    const DEFAULT_TYPE = new URL("about:blank");
    function isUrl(url) {
        return typeof url === "object" && typeof url.href === "string";
    }
    function isProblemDetails(problem) {
        const hasDetail = typeof problem.detail === "undefined" ||
            typeof problem.detail === "string";
        const hasInstance = typeof problem.instance === "undefined" ||
            isUrl(problem.instance);
        return (isUrl(problem.type) &&
            typeof problem.title === "string" &&
            typeof problem.status === "number" &&
            hasDetail &&
            hasInstance);
    }
    /**
     * Type guard which, given an Error, checks whether it has a `problemDetails`
     * field conform to the {@link ProblemDetails} type.
     *
     * @example
     * ```
     * try {
     *  // ...
     * } catch (e) {
     *   if (hasProblemDetails(e)) {
     *     // e.problemDetails can safely be accessed.
     *   }
     * }
     * ```
     *
     * @alpha
     * @since 0.0.1
     * @param error the error being checked.
     * @returns whether the error has problem details attached.
     */
    function hasProblemDetails(error) {
        const { problemDetails } = error;
        return (typeof problemDetails === "object" &&
            // typeof null returns "object".
            problemDetails !== null &&
            isProblemDetails(problemDetails));
    }
    function asUrl(url, base) {
        if (url !== undefined) {
            try {
                return new URL(url, base);
            }
            catch {
                /* no op */
            }
        }
        return undefined;
    }
    /**
     * Builds a {@link ProblemDetails} object from an {@link ErrorResponse}. If the response
     * is a valid {@link https://www.rfc-editor.org/rfc/rfc9457} response, values for the
     * {@link ProblemDetails} object are parsed from it. Otherwise, some values are taken
     * from the response metadata (status, status text), and defaults are applied.
     *
     * @internal
     * @param response the error response.
     * @returns a {@link ProblemDetails} object derived from the response.
     */
    function buildProblemDetails(response) {
        let type;
        let title;
        let status;
        let detail;
        let instance;
        if (response.headers.get("Content-Type") === PROBLEM_DETAILS_MIME) {
            try {
                const responseBody = JSON.parse(response.body);
                const responseType = asUrl(responseBody.type, response.url);
                if (responseType !== undefined) {
                    type = responseType;
                }
                if (typeof responseBody.title === "string") {
                    title = responseBody.title;
                }
                if (typeof responseBody.status === "number") {
                    status = responseBody.status;
                }
                if (typeof responseBody.detail === "string") {
                    detail = responseBody.detail;
                }
                const responseInstance = asUrl(responseBody.instance, response.url);
                if (responseInstance !== undefined) {
                    instance = responseInstance;
                }
            }
            catch {
                // In case of error, default values are applied.
            }
        }
        return Object.freeze({
            type: type ?? DEFAULT_TYPE,
            title: title ?? response.statusText,
            status: status ?? response.status,
            detail,
            instance,
        });
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    /**
     * Error thrown on unsuccessful HTTP response.
     *
     * @example
     * ```ts
     * try {
     *   // ...
     * } catch (e) {
     *   if (e instanceof ClientHttpError) {
     *     // e.response and e.problemDetails can be accessed safely.
     *   }
     * }
     * ```
     *
     * @since 0.0.1
     */
    class ClientHttpError extends InruptClientError {
        constructor(responseMetadata, responseBody, message, options) {
            super(message, options);
            if (responseMetadata.status >= 200 && responseMetadata.status < 400) {
                throw new InruptClientError(`A ClientHttpError cannot be built from a success response, got ${responseMetadata.status} ${responseMetadata.statusText}`);
            }
            this.errorResponse = Object.freeze({
                status: responseMetadata.status,
                statusText: responseMetadata.statusText,
                headers: responseMetadata.headers,
                url: responseMetadata.url,
                body: responseBody,
                ok: false,
            });
            this.details = buildProblemDetails(this.errorResponse);
        }
        get response() {
            return this.errorResponse;
        }
        get problemDetails() {
            return this.details;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const BAD_REQUEST_STATUS = 400;
    /**
     * Runtime error thrown on HTTP Bad Request (400) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.400 | RFC 9110 (15.5.1.) 400 Bad Request}
     * @since 0.0.1
     */
    class BadRequestError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== BAD_REQUEST_STATUS) {
                throw new InruptClientError(`Unexpected status found building BadRequestError: expected ${BAD_REQUEST_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const CONFLICT_STATUS = 409;
    /**
     * Runtime error thrown on HTTP Conflict (409) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.409 | RFC 9110 (15.5.10.) 409 Conflict}
     * @since 0.0.1
     */
    class ConflictError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== CONFLICT_STATUS) {
                throw new InruptClientError(`Unexpected status found building ConflictError: expected ${CONFLICT_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const FORBIDDEN_STATUS = 403;
    /**
     * Runtime error thrown on HTTP Forbidden (403) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.403 | RFC 9110 (15.5.4.) 403 Forbidden}
     * @since 0.0.1
     */
    class ForbiddenError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== FORBIDDEN_STATUS) {
                throw new InruptClientError(`Unexpected status found building ForbiddenError: expected ${FORBIDDEN_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const GONE_STATUS = 410;
    /**
     * Runtime error thrown on HTTP Gone (410) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.410 | RFC 9110 (15.5.11.) 410 Gone}
     * @since 0.0.1
     */
    class GoneError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== GONE_STATUS) {
                throw new InruptClientError(`Unexpected status found building GoneError: expected ${GONE_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const INTERNAL_SERVER_ERROR_STATUS = 500;
    /**
     * Runtime error thrown on HTTP Conflict (500) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.500 | RFC 9110 (15.6.1.) 500 Internal Server Error}
     * @since 0.0.1
     */
    class InternalServerError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== INTERNAL_SERVER_ERROR_STATUS) {
                throw new InruptClientError(`Unexpected status found building InternalServerError: expected ${INTERNAL_SERVER_ERROR_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const METHOD_NOT_ALLOWED_STATUS = 405;
    /**
     * Runtime error thrown on HTTP Method Not Allowed (405) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.405 | RFC 9110 (15.5.6.) 405 Method Not Allowed}
     * @since 0.0.1
     */
    class MethodNotAllowedError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== METHOD_NOT_ALLOWED_STATUS) {
                throw new InruptClientError(`Unexpected status found building MethodNotAllowedError: expected ${METHOD_NOT_ALLOWED_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const NOT_ACCEPTABLE_STATUS = 406;
    /**
     * Runtime error thrown on HTTP Not Acceptable (406) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.406 | RFC 9110 (15.5.7.) 406 Not Acceptable}
     * @since 0.0.1
     */
    class NotAcceptableError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== NOT_ACCEPTABLE_STATUS) {
                throw new InruptClientError(`Unexpected status found building NotAcceptableError: expected ${NOT_ACCEPTABLE_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const NOT_FOUND_STATUS = 404;
    /**
     * Runtime error thrown on HTTP Not Found (404) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.404 | RFC 9110 (15.5.5.) 404 Not Found}
     * @since 0.0.1
     */
    class NotFoundError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== NOT_FOUND_STATUS) {
                throw new InruptClientError(`Unexpected status found building NotFoundError: expected ${NOT_FOUND_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const PRECONDITION_FAILED_STATUS = 412;
    /**
     * Runtime error thrown on HTTP Precondition Failed (412) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.412 | RFC 9110 (15.5.13.) 412 Precondition Failed}
     * @since 0.0.1
     */
    class PreconditionFailedError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== PRECONDITION_FAILED_STATUS) {
                throw new InruptClientError(`Unexpected status found building PreconditionFailedError: expected ${PRECONDITION_FAILED_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const TOO_MANY_REQUESTS_STATUS = 429;
    /**
     * Runtime error thrown on HTTP Too Many Requests (429) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc6585#section-4 | RFC 6585 (4.) 429 Too Many Requests}
     * @since 0.0.1
     */
    class TooManyRequestsError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== TOO_MANY_REQUESTS_STATUS) {
                throw new InruptClientError(`Unexpected status found building TooManyRequestsError: expected ${TOO_MANY_REQUESTS_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const UNAUTHORIZED_STATUS = 401;
    /**
     * Runtime error thrown on HTTP Unauthorized (401) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.401 | RFC 9110 (15.5.2.) 401 Unauthorized}
     * @since 0.0.1
     */
    class UnauthorizedError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== UNAUTHORIZED_STATUS) {
                throw new InruptClientError(`Unexpected status found building UnauthorizedError: expected ${UNAUTHORIZED_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    const UNSUPPORTED_MEDIA_TYPE_STATUS = 415;
    /**
     * Runtime error thrown on HTTP Unsupported Media Type (415) response.
     *
     * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.415 | RFC 9110 (15.5.16.) 415 Unsupported Media Type}
     * @since 0.0.1
     */
    class UnsupportedMediaTypeError extends ClientHttpError {
        constructor(responseMetadata, responseBody, message, options) {
            super(responseMetadata, responseBody, message, options);
            if (responseMetadata.status !== UNSUPPORTED_MEDIA_TYPE_STATUS) {
                throw new InruptClientError(`Unexpected status found building UnsupportedMediaTypeError: expected ${UNSUPPORTED_MEDIA_TYPE_STATUS}, found ${responseMetadata.status}`);
            }
        }
        get response() {
            return super.response;
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    /**
     * Map an HTTP error response to one of the Error classes exported by this library.
     *
     * @example
     * ```ts
     * const response = await fetch("https://example.org/resource");
     * if (!response.ok) {
     *   const responseBody = await response.text();
     *   throw handleErrorResponse(response, responseBody, "Fetch got error response");
     * }
     * ```
     *
     * @param responseMetadata the response metadata
     * @param responseBody the response body
     * @param message the error message
     * @returns an instance of the ClientHttpError subclass matching the response metadata status.
     * If the response status is unkown, the generic ClientHttpError class is used.
     * @since 0.0.1
     */
    function handleErrorResponse(responseMetadata, responseBody, message) {
        switch (responseMetadata.status) {
            case BAD_REQUEST_STATUS:
                return new BadRequestError(responseMetadata, responseBody, message);
            case CONFLICT_STATUS:
                return new ConflictError(responseMetadata, responseBody, message);
            case FORBIDDEN_STATUS:
                return new ForbiddenError(responseMetadata, responseBody, message);
            case GONE_STATUS:
                return new GoneError(responseMetadata, responseBody, message);
            case INTERNAL_SERVER_ERROR_STATUS:
                return new InternalServerError(responseMetadata, responseBody, message);
            case METHOD_NOT_ALLOWED_STATUS:
                return new MethodNotAllowedError(responseMetadata, responseBody, message);
            case NOT_ACCEPTABLE_STATUS:
                return new NotAcceptableError(responseMetadata, responseBody, message);
            case NOT_FOUND_STATUS:
                return new NotFoundError(responseMetadata, responseBody, message);
            case PRECONDITION_FAILED_STATUS:
                return new PreconditionFailedError(responseMetadata, responseBody, message);
            case TOO_MANY_REQUESTS_STATUS:
                return new TooManyRequestsError(responseMetadata, responseBody, message);
            case UNAUTHORIZED_STATUS:
                return new UnauthorizedError(responseMetadata, responseBody, message);
            case UNSUPPORTED_MEDIA_TYPE_STATUS:
                return new UnsupportedMediaTypeError(responseMetadata, responseBody, message);
            default:
                return new ClientHttpError(responseMetadata, responseBody, message);
        }
    }

    //
    // Copyright Inrupt Inc.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to use,
    // copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    // Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    // INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    // PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    function isErrorResponse(response) {
        return (!response.ok &&
            typeof response.body === "string" &&
            typeof response.status === "number" &&
            typeof response.statusText === "string" &&
            typeof response.url === "string" &&
            response.headers instanceof Headers);
    }
    /**
     * Type guard which, given an Error, checks whether it has a `response`
     * field conform to the {@link ErrorResponse} type.
     *
     * @example
     * ```
     * try {
     *  // ...
     * } catch (e) {
     *   if (hasErrorResponse(e)) {
     *     // e.response can safely be accessed.
     *   }
     * }
     * ```
     *
     * @alpha
     * @since 0.0.1
     * @param error the error being checked.
     * @returns whether the error has HTTP error details attached.
     */
    function hasErrorResponse(error) {
        const { response } = error;
        return (typeof response === "object" &&
            response !== null &&
            isErrorResponse(response));
    }

    exports.BAD_REQUEST_STATUS = BAD_REQUEST_STATUS;
    exports.BadRequestError = BadRequestError;
    exports.CONFLICT_STATUS = CONFLICT_STATUS;
    exports.ClientHttpError = ClientHttpError;
    exports.ConflictError = ConflictError;
    exports.DEFAULT_TYPE = DEFAULT_TYPE;
    exports.FORBIDDEN_STATUS = FORBIDDEN_STATUS;
    exports.ForbiddenError = ForbiddenError;
    exports.GONE_STATUS = GONE_STATUS;
    exports.GoneError = GoneError;
    exports.INTERNAL_SERVER_ERROR_STATUS = INTERNAL_SERVER_ERROR_STATUS;
    exports.InruptClientError = InruptClientError;
    exports.InternalServerError = InternalServerError;
    exports.METHOD_NOT_ALLOWED_STATUS = METHOD_NOT_ALLOWED_STATUS;
    exports.MethodNotAllowedError = MethodNotAllowedError;
    exports.NOT_ACCEPTABLE_STATUS = NOT_ACCEPTABLE_STATUS;
    exports.NOT_FOUND_STATUS = NOT_FOUND_STATUS;
    exports.NotAcceptableError = NotAcceptableError;
    exports.NotFoundError = NotFoundError;
    exports.PRECONDITION_FAILED_STATUS = PRECONDITION_FAILED_STATUS;
    exports.PROBLEM_DETAILS_MIME = PROBLEM_DETAILS_MIME;
    exports.PreconditionFailedError = PreconditionFailedError;
    exports.TOO_MANY_REQUESTS_STATUS = TOO_MANY_REQUESTS_STATUS;
    exports.TooManyRequestsError = TooManyRequestsError;
    exports.UNAUTHORIZED_STATUS = UNAUTHORIZED_STATUS;
    exports.UNSUPPORTED_MEDIA_TYPE_STATUS = UNSUPPORTED_MEDIA_TYPE_STATUS;
    exports.UnauthorizedError = UnauthorizedError;
    exports.UnsupportedMediaTypeError = UnsupportedMediaTypeError;
    exports.handleErrorResponse = handleErrorResponse;
    exports.hasErrorResponse = hasErrorResponse;
    exports.hasProblemDetails = hasProblemDetails;

}));
