{"version":3,"file":"index.es.js","sources":["../src/clientError.ts","../src/http/problemDetails.ts","../src/http/httpError.ts","../src/http/wellKnown/badRequestError.ts","../src/http/wellKnown/conflictError.ts","../src/http/wellKnown/forbiddenError.ts","../src/http/wellKnown/goneError.ts","../src/http/wellKnown/internalServerError.ts","../src/http/wellKnown/methodNotAllowedError.ts","../src/http/wellKnown/notAcceptableError.ts","../src/http/wellKnown/notFoundError.ts","../src/http/wellKnown/preconditionFailedError.ts","../src/http/wellKnown/tooManyRequestsError.ts","../src/http/wellKnown/unauthorizedError.ts","../src/http/wellKnown/unsupportedMediaTypeError.ts","../src/http/handleErrorResponse.ts","../src/http/errorResponse.ts"],"sourcesContent":["//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * Superclass of all errors thrown by Inrupt's client libraries.\n *\n * @since 0.0.1\n */\nexport class InruptClientError extends Error {}\n\nexport default InruptClientError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport type { ErrorResponse } from \"./errorResponse\";\n\n/**\n * The Problem Details MIME type documented in {@link https://www.rfc-editor.org/rfc/rfc9457}.\n *\n * @since 0.0.1\n */\nexport const PROBLEM_DETAILS_MIME = \"application/problem+json\";\n/**\n * The default type problem documented in {@link https://www.rfc-editor.org/rfc/rfc9457#name-aboutblank}.\n *\n * @since 0.0.1\n */\nexport const DEFAULT_TYPE = new URL(\"about:blank\");\n\n/**\n * Structured representation of the issue underlying an error response\n * from an HTTP API.\n *\n * @since 0.0.1\n */\nexport type ProblemDetails = Readonly<{\n  /**\n   * The problem type\n   * @defaultValue {@link DEFAULT_TYPE}\n   */\n  type: URL;\n  /**\n   * A short description of the problem.\n   */\n  title: string;\n  /**\n   * The error response status code.\n   */\n  status: number;\n  /**\n   * A longer description of the problem.\n   */\n  detail?: string;\n  /**\n   * A unique URL identifying the problem occurrence.\n   */\n  instance?: URL;\n}>;\n\n/**\n * Extension to an Error thrown on an unsuccessful HTTP response\n * to link to a {@link ProblemDetails} instance.\n *\n * @since 0.0.1\n */\nexport interface WithProblemDetails {\n  /**\n   * The {@link ProblemDetails} instance.\n   */\n  problemDetails: ProblemDetails;\n}\n\nfunction isUrl(url: unknown | URL): url is URL {\n  return typeof url === \"object\" && typeof (url as URL).href === \"string\";\n}\n\nfunction isProblemDetails(\n  problem: unknown | ProblemDetails,\n): problem is ProblemDetails {\n  const hasDetail =\n    typeof (problem as ProblemDetails).detail === \"undefined\" ||\n    typeof (problem as ProblemDetails).detail === \"string\";\n  const hasInstance =\n    typeof (problem as ProblemDetails).instance === \"undefined\" ||\n    isUrl((problem as ProblemDetails).instance);\n  return (\n    isUrl((problem as ProblemDetails).type) &&\n    typeof (problem as ProblemDetails).title === \"string\" &&\n    typeof (problem as ProblemDetails).status === \"number\" &&\n    hasDetail &&\n    hasInstance\n  );\n}\n\n/**\n * Type guard which, given an Error, checks whether it has a `problemDetails`\n * field conform to the {@link ProblemDetails} type.\n *\n * @example\n * ```\n * try {\n *  // ...\n * } catch (e) {\n *   if (hasProblemDetails(e)) {\n *     // e.problemDetails can safely be accessed.\n *   }\n * }\n * ```\n *\n * @alpha\n * @since 0.0.1\n * @param error the error being checked.\n * @returns whether the error has problem details attached.\n */\nexport function hasProblemDetails(\n  error: Error | WithProblemDetails,\n): error is WithProblemDetails {\n  const { problemDetails } = error as WithProblemDetails;\n  return (\n    typeof problemDetails === \"object\" &&\n    // typeof null returns \"object\".\n    problemDetails !== null &&\n    isProblemDetails(problemDetails)\n  );\n}\n\nfunction asUrl(url: string | undefined, base: string): URL | undefined {\n  if (url !== undefined) {\n    try {\n      return new URL(url, base);\n    } catch {\n      /* no op */\n    }\n  }\n  return undefined;\n}\n\n/**\n * Builds a {@link ProblemDetails} object from an {@link ErrorResponse}. If the response\n * is a valid {@link https://www.rfc-editor.org/rfc/rfc9457} response, values for the\n * {@link ProblemDetails} object are parsed from it. Otherwise, some values are taken\n * from the response metadata (status, status text), and defaults are applied.\n *\n * @internal\n * @param response the error response.\n * @returns a {@link ProblemDetails} object derived from the response.\n */\nexport function buildProblemDetails(response: ErrorResponse): ProblemDetails {\n  let type: URL | undefined;\n  let title: string | undefined;\n  let status: number | undefined;\n  let detail: string | undefined;\n  let instance: URL | undefined;\n\n  if (response.headers.get(\"Content-Type\") === PROBLEM_DETAILS_MIME) {\n    try {\n      const responseBody = JSON.parse(response.body);\n      const responseType = asUrl(responseBody.type, response.url);\n      if (responseType !== undefined) {\n        type = responseType;\n      }\n      if (typeof responseBody.title === \"string\") {\n        title = responseBody.title;\n      }\n      if (typeof responseBody.status === \"number\") {\n        status = responseBody.status;\n      }\n      if (typeof responseBody.detail === \"string\") {\n        detail = responseBody.detail;\n      }\n      const responseInstance = asUrl(responseBody.instance, response.url);\n      if (responseInstance !== undefined) {\n        instance = responseInstance;\n      }\n    } catch {\n      // In case of error, default values are applied.\n    }\n  }\n\n  return Object.freeze({\n    type: type ?? DEFAULT_TYPE,\n    title: title ?? response.statusText,\n    status: status ?? response.status,\n    detail,\n    instance,\n  });\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport InruptClientError from \"../clientError\";\nimport type { WithErrorResponse, ErrorResponse } from \"./errorResponse\";\nimport type { WithProblemDetails, ProblemDetails } from \"./problemDetails\";\nimport { buildProblemDetails } from \"./problemDetails\";\n\n/**\n * Error thrown on unsuccessful HTTP response.\n *\n * @example\n * ```ts\n * try {\n *   // ...\n * } catch (e) {\n *   if (e instanceof ClientHttpError) {\n *     // e.response and e.problemDetails can be accessed safely.\n *   }\n * }\n * ```\n *\n * @since 0.0.1\n */\nexport class ClientHttpError\n  extends InruptClientError\n  implements WithErrorResponse, WithProblemDetails\n{\n  private errorResponse: ErrorResponse;\n\n  private details: ProblemDetails;\n\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(message, options);\n    if (responseMetadata.status >= 200 && responseMetadata.status < 400) {\n      throw new InruptClientError(\n        `A ClientHttpError cannot be built from a success response, got ${responseMetadata.status} ${responseMetadata.statusText}`,\n      );\n    }\n    this.errorResponse = Object.freeze({\n      status: responseMetadata.status,\n      statusText: responseMetadata.statusText,\n      headers: responseMetadata.headers,\n      url: responseMetadata.url,\n      body: responseBody,\n      ok: false,\n    });\n    this.details = buildProblemDetails(this.errorResponse);\n  }\n\n  get response() {\n    return this.errorResponse;\n  }\n\n  get problemDetails() {\n    return this.details;\n  }\n}\n\nexport default ClientHttpError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const BAD_REQUEST_STATUS = 400 as const;\n\nexport type BadRequestErrorResponse = ErrorResponse & {\n  status: typeof BAD_REQUEST_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Bad Request (400) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.400 | RFC 9110 (15.5.1.) 400 Bad Request}\n * @since 0.0.1\n */\nexport class BadRequestError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== BAD_REQUEST_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building BadRequestError: expected ${BAD_REQUEST_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): BadRequestErrorResponse {\n    return super.response as BadRequestErrorResponse;\n  }\n}\n\nexport default BadRequestError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const CONFLICT_STATUS = 409 as const;\n\nexport type ConflictErrorResponse = ErrorResponse & {\n  status: typeof CONFLICT_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Conflict (409) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.409 | RFC 9110 (15.5.10.) 409 Conflict}\n * @since 0.0.1\n */\nexport class ConflictError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== CONFLICT_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building ConflictError: expected ${CONFLICT_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): ConflictErrorResponse {\n    return super.response as ConflictErrorResponse;\n  }\n}\n\nexport default ConflictError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const FORBIDDEN_STATUS = 403 as const;\n\nexport type ForbiddenErrorResponse = ErrorResponse & {\n  status: typeof FORBIDDEN_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Forbidden (403) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.403 | RFC 9110 (15.5.4.) 403 Forbidden}\n * @since 0.0.1\n */\nexport class ForbiddenError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== FORBIDDEN_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building ForbiddenError: expected ${FORBIDDEN_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): ForbiddenErrorResponse {\n    return super.response as ForbiddenErrorResponse;\n  }\n}\n\nexport default ForbiddenError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const GONE_STATUS = 410 as const;\n\nexport type GoneErrorResponse = ErrorResponse & {\n  status: typeof GONE_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Gone (410) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.410 | RFC 9110 (15.5.11.) 410 Gone}\n * @since 0.0.1\n */\nexport class GoneError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== GONE_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building GoneError: expected ${GONE_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): GoneErrorResponse {\n    return super.response as GoneErrorResponse;\n  }\n}\n\nexport default GoneError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const INTERNAL_SERVER_ERROR_STATUS = 500 as const;\n\nexport type InternalServerErrorResponse = ErrorResponse & {\n  status: typeof INTERNAL_SERVER_ERROR_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Conflict (500) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.500 | RFC 9110 (15.6.1.) 500 Internal Server Error}\n * @since 0.0.1\n */\nexport class InternalServerError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== INTERNAL_SERVER_ERROR_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building InternalServerError: expected ${INTERNAL_SERVER_ERROR_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): InternalServerErrorResponse {\n    return super.response as InternalServerErrorResponse;\n  }\n}\n\nexport default InternalServerError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const METHOD_NOT_ALLOWED_STATUS = 405 as const;\n\nexport type MethodNotAllowedErrorResponse = ErrorResponse & {\n  status: typeof METHOD_NOT_ALLOWED_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Method Not Allowed (405) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.405 | RFC 9110 (15.5.6.) 405 Method Not Allowed}\n * @since 0.0.1\n */\nexport class MethodNotAllowedError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== METHOD_NOT_ALLOWED_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building MethodNotAllowedError: expected ${METHOD_NOT_ALLOWED_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): MethodNotAllowedErrorResponse {\n    return super.response as MethodNotAllowedErrorResponse;\n  }\n}\n\nexport default MethodNotAllowedError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const NOT_ACCEPTABLE_STATUS = 406 as const;\n\nexport type NotAcceptableErrorResponse = ErrorResponse & {\n  status: typeof NOT_ACCEPTABLE_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Not Acceptable (406) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.406 | RFC 9110 (15.5.7.) 406 Not Acceptable}\n * @since 0.0.1\n */\nexport class NotAcceptableError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== NOT_ACCEPTABLE_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building NotAcceptableError: expected ${NOT_ACCEPTABLE_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): NotAcceptableErrorResponse {\n    return super.response as NotAcceptableErrorResponse;\n  }\n}\n\nexport default NotAcceptableError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const NOT_FOUND_STATUS = 404 as const;\n\nexport type NotFoundErrorResponse = ErrorResponse & {\n  status: typeof NOT_FOUND_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Not Found (404) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.404 | RFC 9110 (15.5.5.) 404 Not Found}\n * @since 0.0.1\n */\nexport class NotFoundError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== NOT_FOUND_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building NotFoundError: expected ${NOT_FOUND_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): NotFoundErrorResponse {\n    return super.response as NotFoundErrorResponse;\n  }\n}\n\nexport default NotFoundError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const PRECONDITION_FAILED_STATUS = 412 as const;\n\nexport type PreconditionFailedErrorResponse = ErrorResponse & {\n  status: typeof PRECONDITION_FAILED_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Precondition Failed (412) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.412 | RFC 9110 (15.5.13.) 412 Precondition Failed}\n * @since 0.0.1\n */\nexport class PreconditionFailedError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== PRECONDITION_FAILED_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building PreconditionFailedError: expected ${PRECONDITION_FAILED_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): PreconditionFailedErrorResponse {\n    return super.response as PreconditionFailedErrorResponse;\n  }\n}\n\nexport default PreconditionFailedError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const TOO_MANY_REQUESTS_STATUS = 429 as const;\n\nexport type TooManyRequestsErrorResponse = ErrorResponse & {\n  status: typeof TOO_MANY_REQUESTS_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Too Many Requests (429) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc6585#section-4 | RFC 6585 (4.) 429 Too Many Requests}\n * @since 0.0.1\n */\nexport class TooManyRequestsError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== TOO_MANY_REQUESTS_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building TooManyRequestsError: expected ${TOO_MANY_REQUESTS_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): TooManyRequestsErrorResponse {\n    return super.response as TooManyRequestsErrorResponse;\n  }\n}\n\nexport default TooManyRequestsError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const UNAUTHORIZED_STATUS = 401 as const;\n\nexport type UnauthorizedErrorResponse = ErrorResponse & {\n  status: typeof UNAUTHORIZED_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Unauthorized (401) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.401 | RFC 9110 (15.5.2.) 401 Unauthorized}\n * @since 0.0.1\n */\nexport class UnauthorizedError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== UNAUTHORIZED_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building UnauthorizedError: expected ${UNAUTHORIZED_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): UnauthorizedErrorResponse {\n    return super.response as UnauthorizedErrorResponse;\n  }\n}\n\nexport default UnauthorizedError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { InruptClientError } from \"../../clientError\";\nimport type { ErrorResponse } from \"../errorResponse\";\nimport { ClientHttpError } from \"../httpError\";\n\nexport const UNSUPPORTED_MEDIA_TYPE_STATUS = 415 as const;\n\nexport type UnsupportedMediaTypeErrorResponse = ErrorResponse & {\n  status: typeof UNSUPPORTED_MEDIA_TYPE_STATUS;\n};\n\n/**\n * Runtime error thrown on HTTP Unsupported Media Type (415) response.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc9110#status.415 | RFC 9110 (15.5.16.) 415 Unsupported Media Type}\n * @since 0.0.1\n */\nexport class UnsupportedMediaTypeError extends ClientHttpError {\n  constructor(\n    responseMetadata: {\n      status: number;\n      statusText: string;\n      headers: Headers;\n      url: string;\n    },\n    responseBody: string,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(responseMetadata, responseBody, message, options);\n    if (responseMetadata.status !== UNSUPPORTED_MEDIA_TYPE_STATUS) {\n      throw new InruptClientError(\n        `Unexpected status found building UnsupportedMediaTypeError: expected ${UNSUPPORTED_MEDIA_TYPE_STATUS}, found ${responseMetadata.status}`,\n      );\n    }\n  }\n\n  get response(): UnsupportedMediaTypeErrorResponse {\n    return super.response as UnsupportedMediaTypeErrorResponse;\n  }\n}\n\nexport default UnsupportedMediaTypeError;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nimport { ClientHttpError } from \"./httpError\";\nimport BadRequestError, {\n  BAD_REQUEST_STATUS,\n} from \"./wellKnown/badRequestError\";\nimport ConflictError, { CONFLICT_STATUS } from \"./wellKnown/conflictError\";\nimport ForbiddenError, { FORBIDDEN_STATUS } from \"./wellKnown/forbiddenError\";\nimport GoneError, { GONE_STATUS } from \"./wellKnown/goneError\";\nimport InternalServerError, {\n  INTERNAL_SERVER_ERROR_STATUS,\n} from \"./wellKnown/internalServerError\";\nimport MethodNotAllowedError, {\n  METHOD_NOT_ALLOWED_STATUS,\n} from \"./wellKnown/methodNotAllowedError\";\nimport NotAcceptableError, {\n  NOT_ACCEPTABLE_STATUS,\n} from \"./wellKnown/notAcceptableError\";\nimport NotFoundError, { NOT_FOUND_STATUS } from \"./wellKnown/notFoundError\";\nimport PreconditionFailedError, {\n  PRECONDITION_FAILED_STATUS,\n} from \"./wellKnown/preconditionFailedError\";\nimport TooManyRequestsError, {\n  TOO_MANY_REQUESTS_STATUS,\n} from \"./wellKnown/tooManyRequestsError\";\nimport UnauthorizedError, {\n  UNAUTHORIZED_STATUS,\n} from \"./wellKnown/unauthorizedError\";\nimport UnsupportedMediaTypeError, {\n  UNSUPPORTED_MEDIA_TYPE_STATUS,\n} from \"./wellKnown/unsupportedMediaTypeError\";\n\n/**\n * Map an HTTP error response to one of the Error classes exported by this library.\n *\n * @example\n * ```ts\n * const response = await fetch(\"https://example.org/resource\");\n * if (!response.ok) {\n *   const responseBody = await response.text();\n *   throw handleErrorResponse(response, responseBody, \"Fetch got error response\");\n * }\n * ```\n *\n * @param responseMetadata the response metadata\n * @param responseBody the response body\n * @param message the error message\n * @returns an instance of the ClientHttpError subclass matching the response metadata status.\n * If the response status is unkown, the generic ClientHttpError class is used.\n * @since 0.0.1\n */\nexport function handleErrorResponse(\n  responseMetadata: {\n    status: number;\n    statusText: string;\n    headers: Headers;\n    url: string;\n  },\n  responseBody: string,\n  message: string,\n): ClientHttpError {\n  switch (responseMetadata.status) {\n    case BAD_REQUEST_STATUS:\n      return new BadRequestError(responseMetadata, responseBody, message);\n    case CONFLICT_STATUS:\n      return new ConflictError(responseMetadata, responseBody, message);\n    case FORBIDDEN_STATUS:\n      return new ForbiddenError(responseMetadata, responseBody, message);\n    case GONE_STATUS:\n      return new GoneError(responseMetadata, responseBody, message);\n    case INTERNAL_SERVER_ERROR_STATUS:\n      return new InternalServerError(responseMetadata, responseBody, message);\n    case METHOD_NOT_ALLOWED_STATUS:\n      return new MethodNotAllowedError(responseMetadata, responseBody, message);\n    case NOT_ACCEPTABLE_STATUS:\n      return new NotAcceptableError(responseMetadata, responseBody, message);\n    case NOT_FOUND_STATUS:\n      return new NotFoundError(responseMetadata, responseBody, message);\n    case PRECONDITION_FAILED_STATUS:\n      return new PreconditionFailedError(\n        responseMetadata,\n        responseBody,\n        message,\n      );\n    case TOO_MANY_REQUESTS_STATUS:\n      return new TooManyRequestsError(responseMetadata, responseBody, message);\n    case UNAUTHORIZED_STATUS:\n      return new UnauthorizedError(responseMetadata, responseBody, message);\n    case UNSUPPORTED_MEDIA_TYPE_STATUS:\n      return new UnsupportedMediaTypeError(\n        responseMetadata,\n        responseBody,\n        message,\n      );\n    default:\n      return new ClientHttpError(responseMetadata, responseBody, message);\n  }\n}\n\nexport default handleErrorResponse;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * A subset of the {@link Response} type metadata.\n *\n * @since 0.0.1\n */\nexport type ResponseMetadata = Pick<\n  Response,\n  \"headers\" | \"status\" | \"statusText\" | \"url\" | \"ok\"\n>;\n\n/**\n * Relevant details of an HTTP error response.\n *\n * @since 0.0.1\n */\nexport type ErrorResponse = Readonly<\n  ResponseMetadata & {\n    ok: false;\n    body: string;\n  }\n>;\n\n/**\n * Extension to an Error thrown on an unsuccessful HTTP response\n * to link to a {@link ErrorResponse} instance.\n *\n * @since 0.0.1\n */\nexport interface WithErrorResponse {\n  response: ErrorResponse;\n}\n\nfunction isErrorResponse(\n  response: Response | ErrorResponse,\n): response is ErrorResponse {\n  return (\n    !response.ok &&\n    typeof response.body === \"string\" &&\n    typeof response.status === \"number\" &&\n    typeof response.statusText === \"string\" &&\n    typeof response.url === \"string\" &&\n    response.headers instanceof Headers\n  );\n}\n\n/**\n * Type guard which, given an Error, checks whether it has a `response`\n * field conform to the {@link ErrorResponse} type.\n *\n * @example\n * ```\n * try {\n *  // ...\n * } catch (e) {\n *   if (hasErrorResponse(e)) {\n *     // e.response can safely be accessed.\n *   }\n * }\n * ```\n *\n * @alpha\n * @since 0.0.1\n * @param error the error being checked.\n * @returns whether the error has HTTP error details attached.\n */\nexport function hasErrorResponse(\n  error: Error | WithErrorResponse,\n): error is WithErrorResponse {\n  const { response } = error as WithErrorResponse;\n  return (\n    typeof response === \"object\" &&\n    response !== null &&\n    isErrorResponse(response)\n  );\n}\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIG;AACG,MAAO,iBAAkB,SAAQ,KAAK,CAAA;AAAG;;AC1B/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;AAIG;AACI,MAAM,oBAAoB,GAAG,2BAA2B;AAC/D;;;;AAIG;MACU,YAAY,GAAG,IAAI,GAAG,CAAC,aAAa,EAAE;AA6CnD,SAAS,KAAK,CAAC,GAAkB,EAAA;IAC/B,OAAO,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAQ,GAAW,CAAC,IAAI,KAAK,QAAQ,CAAC;AAC1E,CAAC;AAED,SAAS,gBAAgB,CACvB,OAAiC,EAAA;AAEjC,IAAA,MAAM,SAAS,GACb,OAAQ,OAA0B,CAAC,MAAM,KAAK,WAAW;AACzD,QAAA,OAAQ,OAA0B,CAAC,MAAM,KAAK,QAAQ,CAAC;AACzD,IAAA,MAAM,WAAW,GACf,OAAQ,OAA0B,CAAC,QAAQ,KAAK,WAAW;AAC3D,QAAA,KAAK,CAAE,OAA0B,CAAC,QAAQ,CAAC,CAAC;AAC9C,IAAA,QACE,KAAK,CAAE,OAA0B,CAAC,IAAI,CAAC;AACvC,QAAA,OAAQ,OAA0B,CAAC,KAAK,KAAK,QAAQ;AACrD,QAAA,OAAQ,OAA0B,CAAC,MAAM,KAAK,QAAQ;QACtD,SAAS;AACT,QAAA,WAAW,EACX;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;AAmBG;AACG,SAAU,iBAAiB,CAC/B,KAAiC,EAAA;AAEjC,IAAA,MAAM,EAAE,cAAc,EAAE,GAAG,KAA2B,CAAC;AACvD,IAAA,QACE,OAAO,cAAc,KAAK,QAAQ;;AAElC,QAAA,cAAc,KAAK,IAAI;AACvB,QAAA,gBAAgB,CAAC,cAAc,CAAC,EAChC;AACJ,CAAC;AAED,SAAS,KAAK,CAAC,GAAuB,EAAE,IAAY,EAAA;AAClD,IAAA,IAAI,GAAG,KAAK,SAAS,EAAE;AACrB,QAAA,IAAI;AACF,YAAA,OAAO,IAAI,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAC3B;AAAC,QAAA,MAAM;;SAEP;KACF;AACD,IAAA,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;;;;;;;;AASG;AACG,SAAU,mBAAmB,CAAC,QAAuB,EAAA;AACzD,IAAA,IAAI,IAAqB,CAAC;AAC1B,IAAA,IAAI,KAAyB,CAAC;AAC9B,IAAA,IAAI,MAA0B,CAAC;AAC/B,IAAA,IAAI,MAA0B,CAAC;AAC/B,IAAA,IAAI,QAAyB,CAAC;IAE9B,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,oBAAoB,EAAE;AACjE,QAAA,IAAI;YACF,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC/C,YAAA,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC5D,YAAA,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC9B,IAAI,GAAG,YAAY,CAAC;aACrB;AACD,YAAA,IAAI,OAAO,YAAY,CAAC,KAAK,KAAK,QAAQ,EAAE;AAC1C,gBAAA,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;aAC5B;AACD,YAAA,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ,EAAE;AAC3C,gBAAA,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;aAC9B;AACD,YAAA,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ,EAAE;AAC3C,gBAAA,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;aAC9B;AACD,YAAA,MAAM,gBAAgB,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;AACpE,YAAA,IAAI,gBAAgB,KAAK,SAAS,EAAE;gBAClC,QAAQ,GAAG,gBAAgB,CAAC;aAC7B;SACF;AAAC,QAAA,MAAM;;SAEP;KACF;IAED,OAAO,MAAM,CAAC,MAAM,CAAC;QACnB,IAAI,EAAE,IAAI,IAAI,YAAY;AAC1B,QAAA,KAAK,EAAE,KAAK,IAAI,QAAQ,CAAC,UAAU;AACnC,QAAA,MAAM,EAAE,MAAM,IAAI,QAAQ,CAAC,MAAM;QACjC,MAAM;QACN,QAAQ;AACT,KAAA,CAAC,CAAC;AACL;;ACjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;;;AAeG;AACG,MAAO,eACX,SAAQ,iBAAiB,CAAA;AAOzB,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;AAEtB,QAAA,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AACxB,QAAA,IAAI,gBAAgB,CAAC,MAAM,IAAI,GAAG,IAAI,gBAAgB,CAAC,MAAM,GAAG,GAAG,EAAE;AACnE,YAAA,MAAM,IAAI,iBAAiB,CACzB,CAAA,+DAAA,EAAkE,gBAAgB,CAAC,MAAM,CAAA,CAAA,EAAI,gBAAgB,CAAC,UAAU,CAAA,CAAE,CAC3H,CAAC;SACH;AACD,QAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC;YACjC,MAAM,EAAE,gBAAgB,CAAC,MAAM;YAC/B,UAAU,EAAE,gBAAgB,CAAC,UAAU;YACvC,OAAO,EAAE,gBAAgB,CAAC,OAAO;YACjC,GAAG,EAAE,gBAAgB,CAAC,GAAG;AACzB,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,EAAE,EAAE,KAAK;AACV,SAAA,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KACxD;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,IAAI,CAAC,aAAa,CAAC;KAC3B;AAED,IAAA,IAAI,cAAc,GAAA;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;AACF;;ACrFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,kBAAkB,GAAG,IAAa;AAM/C;;;;;AAKG;AACG,MAAO,eAAgB,SAAQ,eAAe,CAAA;AAClD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,kBAAkB,EAAE;YAClD,MAAM,IAAI,iBAAiB,CACzB,CAA8D,2DAAA,EAAA,kBAAkB,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CACrH,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAmC,CAAC;KAClD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,eAAe,GAAG,IAAa;AAM5C;;;;;AAKG;AACG,MAAO,aAAc,SAAQ,eAAe,CAAA;AAChD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,eAAe,EAAE;YAC/C,MAAM,IAAI,iBAAiB,CACzB,CAA4D,yDAAA,EAAA,eAAe,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CAChH,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAiC,CAAC;KAChD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,gBAAgB,GAAG,IAAa;AAM7C;;;;;AAKG;AACG,MAAO,cAAe,SAAQ,eAAe,CAAA;AACjD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,gBAAgB,EAAE;YAChD,MAAM,IAAI,iBAAiB,CACzB,CAA6D,0DAAA,EAAA,gBAAgB,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CAClH,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAkC,CAAC;KACjD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,WAAW,GAAG,IAAa;AAMxC;;;;;AAKG;AACG,MAAO,SAAU,SAAQ,eAAe,CAAA;AAC5C,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,WAAW,EAAE;YAC3C,MAAM,IAAI,iBAAiB,CACzB,CAAwD,qDAAA,EAAA,WAAW,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CACxG,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAA6B,CAAC;KAC5C;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,4BAA4B,GAAG,IAAa;AAMzD;;;;;AAKG;AACG,MAAO,mBAAoB,SAAQ,eAAe,CAAA;AACtD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,4BAA4B,EAAE;YAC5D,MAAM,IAAI,iBAAiB,CACzB,CAAkE,+DAAA,EAAA,4BAA4B,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CACnI,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAuC,CAAC;KACtD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,yBAAyB,GAAG,IAAa;AAMtD;;;;;AAKG;AACG,MAAO,qBAAsB,SAAQ,eAAe,CAAA;AACxD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,yBAAyB,EAAE;YACzD,MAAM,IAAI,iBAAiB,CACzB,CAAoE,iEAAA,EAAA,yBAAyB,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CAClI,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAyC,CAAC;KACxD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,qBAAqB,GAAG,IAAa;AAMlD;;;;;AAKG;AACG,MAAO,kBAAmB,SAAQ,eAAe,CAAA;AACrD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,qBAAqB,EAAE;YACrD,MAAM,IAAI,iBAAiB,CACzB,CAAiE,8DAAA,EAAA,qBAAqB,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CAC3H,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAsC,CAAC;KACrD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,gBAAgB,GAAG,IAAa;AAM7C;;;;;AAKG;AACG,MAAO,aAAc,SAAQ,eAAe,CAAA;AAChD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,gBAAgB,EAAE;YAChD,MAAM,IAAI,iBAAiB,CACzB,CAA4D,yDAAA,EAAA,gBAAgB,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CACjH,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAiC,CAAC;KAChD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,0BAA0B,GAAG,IAAa;AAMvD;;;;;AAKG;AACG,MAAO,uBAAwB,SAAQ,eAAe,CAAA;AAC1D,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,0BAA0B,EAAE;YAC1D,MAAM,IAAI,iBAAiB,CACzB,CAAsE,mEAAA,EAAA,0BAA0B,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CACrI,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAA2C,CAAC;KAC1D;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,wBAAwB,GAAG,IAAa;AAMrD;;;;;AAKG;AACG,MAAO,oBAAqB,SAAQ,eAAe,CAAA;AACvD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,wBAAwB,EAAE;YACxD,MAAM,IAAI,iBAAiB,CACzB,CAAmE,gEAAA,EAAA,wBAAwB,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CAChI,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAwC,CAAC;KACvD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,mBAAmB,GAAG,IAAa;AAMhD;;;;;AAKG;AACG,MAAO,iBAAkB,SAAQ,eAAe,CAAA;AACpD,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,mBAAmB,EAAE;YACnD,MAAM,IAAI,iBAAiB,CACzB,CAAgE,6DAAA,EAAA,mBAAmB,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CACxH,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAAqC,CAAC;KACpD;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAM,6BAA6B,GAAG,IAAa;AAM1D;;;;;AAKG;AACG,MAAO,yBAA0B,SAAQ,eAAe,CAAA;AAC5D,IAAA,WAAA,CACE,gBAKC,EACD,YAAoB,EACpB,OAAe,EACf,OAAsB,EAAA;QAEtB,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxD,QAAA,IAAI,gBAAgB,CAAC,MAAM,KAAK,6BAA6B,EAAE;YAC7D,MAAM,IAAI,iBAAiB,CACzB,CAAwE,qEAAA,EAAA,6BAA6B,CAAW,QAAA,EAAA,gBAAgB,CAAC,MAAM,CAAE,CAAA,CAC1I,CAAC;SACH;KACF;AAED,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,KAAK,CAAC,QAA6C,CAAC;KAC5D;AACF;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA+BA;;;;;;;;;;;;;;;;;;AAkBG;SACa,mBAAmB,CACjC,gBAKC,EACD,YAAoB,EACpB,OAAe,EAAA;AAEf,IAAA,QAAQ,gBAAgB,CAAC,MAAM;AAC7B,QAAA,KAAK,kBAAkB;YACrB,OAAO,IAAI,eAAe,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AACtE,QAAA,KAAK,eAAe;YAClB,OAAO,IAAI,aAAa,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AACpE,QAAA,KAAK,gBAAgB;YACnB,OAAO,IAAI,cAAc,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AACrE,QAAA,KAAK,WAAW;YACd,OAAO,IAAI,SAAS,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AAChE,QAAA,KAAK,4BAA4B;YAC/B,OAAO,IAAI,mBAAmB,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AAC1E,QAAA,KAAK,yBAAyB;YAC5B,OAAO,IAAI,qBAAqB,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AAC5E,QAAA,KAAK,qBAAqB;YACxB,OAAO,IAAI,kBAAkB,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AACzE,QAAA,KAAK,gBAAgB;YACnB,OAAO,IAAI,aAAa,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AACpE,QAAA,KAAK,0BAA0B;YAC7B,OAAO,IAAI,uBAAuB,CAChC,gBAAgB,EAChB,YAAY,EACZ,OAAO,CACR,CAAC;AACJ,QAAA,KAAK,wBAAwB;YAC3B,OAAO,IAAI,oBAAoB,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AAC3E,QAAA,KAAK,mBAAmB;YACtB,OAAO,IAAI,iBAAiB,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;AACxE,QAAA,KAAK,6BAA6B;YAChC,OAAO,IAAI,yBAAyB,CAClC,gBAAgB,EAChB,YAAY,EACZ,OAAO,CACR,CAAC;AACJ,QAAA;YACE,OAAO,IAAI,eAAe,CAAC,gBAAgB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;KACvE;AACH;;ACnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkCA,SAAS,eAAe,CACtB,QAAkC,EAAA;AAElC,IAAA,QACE,CAAC,QAAQ,CAAC,EAAE;AACZ,QAAA,OAAO,QAAQ,CAAC,IAAI,KAAK,QAAQ;AACjC,QAAA,OAAO,QAAQ,CAAC,MAAM,KAAK,QAAQ;AACnC,QAAA,OAAO,QAAQ,CAAC,UAAU,KAAK,QAAQ;AACvC,QAAA,OAAO,QAAQ,CAAC,GAAG,KAAK,QAAQ;AAChC,QAAA,QAAQ,CAAC,OAAO,YAAY,OAAO,EACnC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;AAmBG;AACG,SAAU,gBAAgB,CAC9B,KAAgC,EAAA;AAEhC,IAAA,MAAM,EAAE,QAAQ,EAAE,GAAG,KAA0B,CAAC;AAChD,IAAA,QACE,OAAO,QAAQ,KAAK,QAAQ;AAC5B,QAAA,QAAQ,KAAK,IAAI;AACjB,QAAA,eAAe,CAAC,QAAQ,CAAC,EACzB;AACJ;;;;"}