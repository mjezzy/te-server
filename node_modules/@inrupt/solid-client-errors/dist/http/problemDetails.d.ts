/**
 * The Problem Details MIME type documented in {@link https://www.rfc-editor.org/rfc/rfc9457}.
 *
 * @since 0.0.1
 */
export declare const PROBLEM_DETAILS_MIME = "application/problem+json";
/**
 * The default type problem documented in {@link https://www.rfc-editor.org/rfc/rfc9457#name-aboutblank}.
 *
 * @since 0.0.1
 */
export declare const DEFAULT_TYPE: URL;
/**
 * Structured representation of the issue underlying an error response
 * from an HTTP API.
 *
 * @since 0.0.1
 */
export type ProblemDetails = Readonly<{
    /**
     * The problem type
     * @defaultValue {@link DEFAULT_TYPE}
     */
    type: URL;
    /**
     * A short description of the problem.
     */
    title: string;
    /**
     * The error response status code.
     */
    status: number;
    /**
     * A longer description of the problem.
     */
    detail?: string;
    /**
     * A unique URL identifying the problem occurrence.
     */
    instance?: URL;
}>;
/**
 * Extension to an Error thrown on an unsuccessful HTTP response
 * to link to a {@link ProblemDetails} instance.
 *
 * @since 0.0.1
 */
export interface WithProblemDetails {
    /**
     * The {@link ProblemDetails} instance.
     */
    problemDetails: ProblemDetails;
}
/**
 * Type guard which, given an Error, checks whether it has a `problemDetails`
 * field conform to the {@link ProblemDetails} type.
 *
 * @example
 * ```
 * try {
 *  // ...
 * } catch (e) {
 *   if (hasProblemDetails(e)) {
 *     // e.problemDetails can safely be accessed.
 *   }
 * }
 * ```
 *
 * @alpha
 * @since 0.0.1
 * @param error the error being checked.
 * @returns whether the error has problem details attached.
 */
export declare function hasProblemDetails(error: Error | WithProblemDetails): error is WithProblemDetails;
