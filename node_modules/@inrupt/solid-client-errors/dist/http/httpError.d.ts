import InruptClientError from "../clientError";
import type { WithErrorResponse } from "./errorResponse";
import type { WithProblemDetails } from "./problemDetails";
/**
 * Error thrown on unsuccessful HTTP response.
 *
 * @example
 * ```ts
 * try {
 *   // ...
 * } catch (e) {
 *   if (e instanceof ClientHttpError) {
 *     // e.response and e.problemDetails can be accessed safely.
 *   }
 * }
 * ```
 *
 * @since 0.0.1
 */
export declare class ClientHttpError extends InruptClientError implements WithErrorResponse, WithProblemDetails {
    private errorResponse;
    private details;
    constructor(responseMetadata: {
        status: number;
        statusText: string;
        headers: Headers;
        url: string;
    }, responseBody: string, message: string, options?: ErrorOptions);
    get response(): Readonly<import("./errorResponse").ResponseMetadata & {
        ok: false;
        body: string;
    }>;
    get problemDetails(): Readonly<{
        type: URL;
        title: string;
        status: number;
        detail?: string;
        instance?: URL;
    }>;
}
export default ClientHttpError;
